<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yggdrasil.Scripting</name>
    </assembly>
    <members>
        <member name="T:Yggdrasil.Scripting.CompilerErrorException">
            <summary>
            An exception that might occur while compiling scripts.
            </summary>
        </member>
        <member name="P:Yggdrasil.Scripting.CompilerErrorException.Errors">
            <summary>
            The errors that occurred.
            </summary>
        </member>
        <member name="M:Yggdrasil.Scripting.CompilerErrorException.#ctor(System.Collections.Generic.List{System.CodeDom.Compiler.CompilerError})">
            <summary>
            Creates new instance.
            </summary>
            <param name="errors"></param>
        </member>
        <member name="T:Yggdrasil.Scripting.ScriptLoadingException">
            <summary>
            An exception that might occur while loading compiled scripts.
            </summary>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoadingException.#ctor(System.String)">
            <summary>
            Creates new instance.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoadingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates new instance.
            </summary>
            <param name="typeName"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Yggdrasil.Scripting.IPrecompiler">
            <summary>
            A script pre-compiler.
            </summary>
        </member>
        <member name="M:Yggdrasil.Scripting.IPrecompiler.Precompile(System.String,System.String@)">
            <summary>
            Precompiles given script, returns false if the script wasn't
            changed.
            </summary>
            <param name="filePath">The path to the original script file.</param>
            <param name="script">The contents of the script file.</param>
            <returns></returns>
        </member>
        <member name="T:Yggdrasil.Scripting.PriorityAttribute">
            <summary>
            Specifies initialization priority.
            </summary>
        </member>
        <member name="P:Yggdrasil.Scripting.PriorityAttribute.Value">
            <summary>
            Value to sort by.
            </summary>
        </member>
        <member name="M:Yggdrasil.Scripting.PriorityAttribute.#ctor(System.Int32)">
            <summary>
            Creates new instance
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Yggdrasil.Scripting.IScript">
            <summary>
            Implemented by classes in scripts that can be initialized
            on load.
            </summary>
        </member>
        <member name="M:Yggdrasil.Scripting.IScript.Init">
            <summary>
            Called after the script is loaded.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Yggdrasil.Scripting.IPostInitScript">
            <summary>
            Implemented by scripts that need to execute code after all
            scripts were initialized.
            </summary>
        </member>
        <member name="M:Yggdrasil.Scripting.IPostInitScript.OnPostInit">
            <summary>
            Called after all scripts were initialized.
            </summary>
        </member>
        <member name="T:Yggdrasil.Scripting.ScriptLoader">
            <summary>
            Loads and initializes .NET scripts.
            </summary>
        </member>
        <member name="P:Yggdrasil.Scripting.ScriptLoader.LoadedCount">
            <summary>
            Returns the amount of script classes that were successfully
            loaded and initialized.
            </summary>
        </member>
        <member name="P:Yggdrasil.Scripting.ScriptLoader.FailCount">
            <summary>
            Returns the amount of script classes that failed to initialize.
            </summary>
        </member>
        <member name="P:Yggdrasil.Scripting.ScriptLoader.TotalCount">
            <summary>
            Returns the amount of script classes that were to be loaded.
            </summary>
        </member>
        <member name="P:Yggdrasil.Scripting.ScriptLoader.FileCount">
            <summary>
            Returns the amount of files loaded.
            </summary>
        </member>
        <member name="P:Yggdrasil.Scripting.ScriptLoader.LoadingExceptions">
            <summary>
            A list of exceptions thrown while initializing the compiled
            scripts.
            </summary>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoader.#ctor">
            <summary>
            Creates new instance
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoader.#ctor(System.String)">
            <summary>
            Creates new instance, caching the result in the given file.
            </summary>
            <param name="provider"></param>
            <param name="cacheFilePath"></param>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoader.AddPrecompiler(Yggdrasil.Scripting.IPrecompiler)">
            <summary>
            Adds precompiler to be used on load.
            </summary>
            <param name="precompiler"></param>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoader.LoadFromListFile(System.String,System.String[])">
            <summary>
            Loads all files listed in the given file, using
            <see cref="T:Yggdrasil.IO.FileReader"/>. If priority folders
            is set, the method tries to find them in those folders first,
            using the files from them first, in order, so files can be
            overriden from other folders.
            </summary>
            <example>
            LoadFromListFile("system/scripts/script_list.txt", "user/scripts", "system/scripts/");
            </example>
            <param name="filePath"></param>
            <param name="priorityFolders"></param>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoader.ReadScriptList(System.String,System.String[])">
            <summary>
            Returns list of files listed in given file. If priority folders
            is set, the method tries to find them in those folders first,
            using the files from them first, in order, so files can be
            overriden from other folders.
            </summary>
            <example>
            ReadScriptList("system/scripts/script_list.txt", "user/scripts", "system/scripts/");
            </example>
            <param name="scriptListFile"></param>
            <param name="priorityFolders"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoader.AddAssembly(System.String)">
            <summary>
            Adds an assembly to References for use when compiling scripts
            </summary>
            <param name="assemblyDll"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoader.AddAssemblies(System.String[])">
            <summary>
            Helper method to add multiple assemblies at once.
            </summary>
            <param name="assemblies"></param>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoader.AddNetCoreDefaultReferences">
            <summary>
            Helper method to add default .net core references for compiling scripts.
            </summary>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoader.LoadFromList(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads all files in the given list.
            </summary>
            <param name="scriptFilesList"></param>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoader.Reload">
            <summary>
            Reloads all previously loaded scripts.
            </summary>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoader.Unload">
            <summary>
            Unloads all scripts, disposing them and clearing the internal
            script lists. Does not clear script file list, reloading after
            this loads the previously loaded scripts.
            </summary>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoader.Clear">
            <summary>
            Unloads all scripts and clears script file list. Unlike Unload,
            reloading after this doesn't actually load anything.
            </summary>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoader.Compile(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates new assembly, compiling the given files.
            </summary>
            <param name="scriptFilesList"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoader.EmitToArray(Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Takes a compilation and emits the resulting executable scripts as a byte array.
            </summary>
            <param name="compilation"></param>
            <returns></returns>
            <exception cref="T:Yggdrasil.Scripting.CompilerErrorException"></exception>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoader.ClearTempFiles">
            <summary>
            Clears temp files created during compilation.
            </summary>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoader.InitAssembly(System.Reflection.Assembly)">
            <summary>
            Initializes all types in given assembly.
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Yggdrasil.Scripting.ScriptLoader.GetScriptType(System.String)">
            <summary>
            Returns loaded script type by name.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
    </members>
</doc>
